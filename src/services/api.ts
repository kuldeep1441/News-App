

import axios from 'axios';

export interface Post {
  id: number;
  title: string;
  body: string;
  comments: { body: string }[]; // Array of comments with body only
}

// Fetch all posts, with comments embedded
export const fetchPosts = async (): Promise<Post[]> => {
  const response = await axios.get<Post[]>('https://jsonplaceholder.typicode.com/posts');
  
  // Fetch comments for each post and add them to the post object
  const postsWithComments = await Promise.all(
    response.data.map(async (post) => {
      const commentsResponse = await axios.get(`https://jsonplaceholder.typicode.com/posts/${post.id}/comments`);
      return { ...post, comments: commentsResponse.data.map((comment: { body: string }) => ({ body: comment.body })) };
    })
  );

  return postsWithComments;
};

// Add a new post
export const addPost = async (title: string, body: string): Promise<Post> => {
  const response = await axios.post('https://jsonplaceholder.typicode.com/posts', {
    title,
    body, // 'body' is the correct key according to the API
  });
  
  // Return the newly added post (will include id since it's generated by the API)
  return { ...response.data, comments: [] }; // New posts don't have comments by default
};

// Add a new comment to a post
export const addComment = async (postId: number, commentBody: string): Promise<void> => {
  await axios.post(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`, {
    postId,
    body: commentBody,
  });
};

// Delete a post
export const deletePost = async (postId: number): Promise<void> => {
  await axios.delete(`https://jsonplaceholder.typicode.com/posts/${postId}`);
};

// Update an existing post
export const updatePost = async (postId: number, updatedTitle: string, updatedBody: string): Promise<Post> => {
  const response = await axios.put(`https://jsonplaceholder.typicode.com/posts/${postId}`, {
    title: updatedTitle,
    body: updatedBody,
  });

  // Return the updated post
  return { ...response.data, comments: [] }; // Optionally return updated comments if needed
};
